#Used k-nearest neighbors algorithm to predict car prices. Data was found on 

https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data

#Introduction To The Data Set

In [120]:
import pandas as pd
import numpy as np

pd.options.display.max_columns = 99
In [121]:
cols = ['symboling', 'normalized-losses', 'make', 'fuel-type', 'aspiration', 'num-of-doors', 'body-style', 
        'drive-wheels', 'engine-location', 'wheel-base', 'length', 'width', 'height', 'curb-weight', 'engine-type', 
        'num-of-cylinders', 'engine-size', 'fuel-system', 'bore', 'stroke', 'compression-rate', 'horsepower', 'peak-rpm', 'city-mpg', 'highway-mpg', 'price']
cars = pd.read_csv('imports-85.data', names=cols)
In [122]:
cars
Out[122]:
symboling	normalized-losses	make	fuel-type	aspiration	num-of-doors	body-style	drive-wheels	engine-location	wheel-base	length	width	height	curb-weight	engine-type	num-of-cylinders	engine-size	fuel-system	bore	stroke	compression-rate	horsepower	peak-rpm	city-mpg	highway-mpg	price
0	3	?	alfa-romero	gas	std	two	convertible	rwd	front	88.6	168.8	64.1	48.8	2548	dohc	four	130	mpfi	3.47	2.68	9.00	111	5000	21	27	13495
1	3	?	alfa-romero	gas	std	two	convertible	rwd	front	88.6	168.8	64.1	48.8	2548	dohc	four	130	mpfi	3.47	2.68	9.00	111	5000	21	27	16500
2	1	?	alfa-romero	gas	std	two	hatchback	rwd	front	94.5	171.2	65.5	52.4	2823	ohcv	six	152	mpfi	2.68	3.47	9.00	154	5000	19	26	16500
3	2	164	audi	gas	std	four	sedan	fwd	front	99.8	176.6	66.2	54.3	2337	ohc	four	109	mpfi	3.19	3.40	10.00	102	5500	24	30	13950
4	2	164	audi	gas	std	four	sedan	4wd	front	99.4	176.6	66.4	54.3	2824	ohc	five	136	mpfi	3.19	3.40	8.00	115	5500	18	22	17450
5	2	?	audi	gas	std	two	sedan	fwd	front	99.8	177.3	66.3	53.1	2507	ohc	five	136	mpfi	3.19	3.40	8.50	110	5500	19	25	15250
6	1	158	audi	gas	std	four	sedan	fwd	front	105.8	192.7	71.4	55.7	2844	ohc	five	136	mpfi	3.19	3.40	8.50	110	5500	19	25	17710
7	1	?	audi	gas	std	four	wagon	fwd	front	105.8	192.7	71.4	55.7	2954	ohc	five	136	mpfi	3.19	3.40	8.50	110	5500	19	25	18920
8	1	158	audi	gas	turbo	four	sedan	fwd	front	105.8	192.7	71.4	55.9	3086	ohc	five	131	mpfi	3.13	3.40	8.30	140	5500	17	20	23875
9	0	?	audi	gas	turbo	two	hatchback	4wd	front	99.5	178.2	67.9	52.0	3053	ohc	five	131	mpfi	3.13	3.40	7.00	160	5500	16	22	?
10	2	192	bmw	gas	std	two	sedan	rwd	front	101.2	176.8	64.8	54.3	2395	ohc	four	108	mpfi	3.50	2.80	8.80	101	5800	23	29	16430
11	0	192	bmw	gas	std	four	sedan	rwd	front	101.2	176.8	64.8	54.3	2395	ohc	four	108	mpfi	3.50	2.80	8.80	101	5800	23	29	16925
12	0	188	bmw	gas	std	two	sedan	rwd	front	101.2	176.8	64.8	54.3	2710	ohc	six	164	mpfi	3.31	3.19	9.00	121	4250	21	28	20970
13	0	188	bmw	gas	std	four	sedan	rwd	front	101.2	176.8	64.8	54.3	2765	ohc	six	164	mpfi	3.31	3.19	9.00	121	4250	21	28	21105
14	1	?	bmw	gas	std	four	sedan	rwd	front	103.5	189.0	66.9	55.7	3055	ohc	six	164	mpfi	3.31	3.19	9.00	121	4250	20	25	24565
15	0	?	bmw	gas	std	four	sedan	rwd	front	103.5	189.0	66.9	55.7	3230	ohc	six	209	mpfi	3.62	3.39	8.00	182	5400	16	22	30760
16	0	?	bmw	gas	std	two	sedan	rwd	front	103.5	193.8	67.9	53.7	3380	ohc	six	209	mpfi	3.62	3.39	8.00	182	5400	16	22	41315
17	0	?	bmw	gas	std	four	sedan	rwd	front	110.0	197.0	70.9	56.3	3505	ohc	six	209	mpfi	3.62	3.39	8.00	182	5400	15	20	36880
18	2	121	chevrolet	gas	std	two	hatchback	fwd	front	88.4	141.1	60.3	53.2	1488	l	three	61	2bbl	2.91	3.03	9.50	48	5100	47	53	5151
19	1	98	chevrolet	gas	std	two	hatchback	fwd	front	94.5	155.9	63.6	52.0	1874	ohc	four	90	2bbl	3.03	3.11	9.60	70	5400	38	43	6295
20	0	81	chevrolet	gas	std	four	sedan	fwd	front	94.5	158.8	63.6	52.0	1909	ohc	four	90	2bbl	3.03	3.11	9.60	70	5400	38	43	6575
21	1	118	dodge	gas	std	two	hatchback	fwd	front	93.7	157.3	63.8	50.8	1876	ohc	four	90	2bbl	2.97	3.23	9.41	68	5500	37	41	5572
22	1	118	dodge	gas	std	two	hatchback	fwd	front	93.7	157.3	63.8	50.8	1876	ohc	four	90	2bbl	2.97	3.23	9.40	68	5500	31	38	6377
23	1	118	dodge	gas	turbo	two	hatchback	fwd	front	93.7	157.3	63.8	50.8	2128	ohc	four	98	mpfi	3.03	3.39	7.60	102	5500	24	30	7957
24	1	148	dodge	gas	std	four	hatchback	fwd	front	93.7	157.3	63.8	50.6	1967	ohc	four	90	2bbl	2.97	3.23	9.40	68	5500	31	38	6229
25	1	148	dodge	gas	std	four	sedan	fwd	front	93.7	157.3	63.8	50.6	1989	ohc	four	90	2bbl	2.97	3.23	9.40	68	5500	31	38	6692
26	1	148	dodge	gas	std	four	sedan	fwd	front	93.7	157.3	63.8	50.6	1989	ohc	four	90	2bbl	2.97	3.23	9.40	68	5500	31	38	7609
27	1	148	dodge	gas	turbo	?	sedan	fwd	front	93.7	157.3	63.8	50.6	2191	ohc	four	98	mpfi	3.03	3.39	7.60	102	5500	24	30	8558
28	-1	110	dodge	gas	std	four	wagon	fwd	front	103.3	174.6	64.6	59.8	2535	ohc	four	122	2bbl	3.34	3.46	8.50	88	5000	24	30	8921
29	3	145	dodge	gas	turbo	two	hatchback	fwd	front	95.9	173.2	66.3	50.2	2811	ohc	four	156	mfi	3.60	3.90	7.00	145	5000	19	24	12964
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
175	-1	65	toyota	gas	std	four	hatchback	fwd	front	102.4	175.6	66.5	53.9	2414	ohc	four	122	mpfi	3.31	3.54	8.70	92	4200	27	32	9988
176	-1	65	toyota	gas	std	four	sedan	fwd	front	102.4	175.6	66.5	54.9	2414	ohc	four	122	mpfi	3.31	3.54	8.70	92	4200	27	32	10898
177	-1	65	toyota	gas	std	four	hatchback	fwd	front	102.4	175.6	66.5	53.9	2458	ohc	four	122	mpfi	3.31	3.54	8.70	92	4200	27	32	11248
178	3	197	toyota	gas	std	two	hatchback	rwd	front	102.9	183.5	67.7	52.0	2976	dohc	six	171	mpfi	3.27	3.35	9.30	161	5200	20	24	16558
179	3	197	toyota	gas	std	two	hatchback	rwd	front	102.9	183.5	67.7	52.0	3016	dohc	six	171	mpfi	3.27	3.35	9.30	161	5200	19	24	15998
180	-1	90	toyota	gas	std	four	sedan	rwd	front	104.5	187.8	66.5	54.1	3131	dohc	six	171	mpfi	3.27	3.35	9.20	156	5200	20	24	15690
181	-1	?	toyota	gas	std	four	wagon	rwd	front	104.5	187.8	66.5	54.1	3151	dohc	six	161	mpfi	3.27	3.35	9.20	156	5200	19	24	15750
182	2	122	volkswagen	diesel	std	two	sedan	fwd	front	97.3	171.7	65.5	55.7	2261	ohc	four	97	idi	3.01	3.40	23.00	52	4800	37	46	7775
183	2	122	volkswagen	gas	std	two	sedan	fwd	front	97.3	171.7	65.5	55.7	2209	ohc	four	109	mpfi	3.19	3.40	9.00	85	5250	27	34	7975
184	2	94	volkswagen	diesel	std	four	sedan	fwd	front	97.3	171.7	65.5	55.7	2264	ohc	four	97	idi	3.01	3.40	23.00	52	4800	37	46	7995
185	2	94	volkswagen	gas	std	four	sedan	fwd	front	97.3	171.7	65.5	55.7	2212	ohc	four	109	mpfi	3.19	3.40	9.00	85	5250	27	34	8195
186	2	94	volkswagen	gas	std	four	sedan	fwd	front	97.3	171.7	65.5	55.7	2275	ohc	four	109	mpfi	3.19	3.40	9.00	85	5250	27	34	8495
187	2	94	volkswagen	diesel	turbo	four	sedan	fwd	front	97.3	171.7	65.5	55.7	2319	ohc	four	97	idi	3.01	3.40	23.00	68	4500	37	42	9495
188	2	94	volkswagen	gas	std	four	sedan	fwd	front	97.3	171.7	65.5	55.7	2300	ohc	four	109	mpfi	3.19	3.40	10.00	100	5500	26	32	9995
189	3	?	volkswagen	gas	std	two	convertible	fwd	front	94.5	159.3	64.2	55.6	2254	ohc	four	109	mpfi	3.19	3.40	8.50	90	5500	24	29	11595
190	3	256	volkswagen	gas	std	two	hatchback	fwd	front	94.5	165.7	64.0	51.4	2221	ohc	four	109	mpfi	3.19	3.40	8.50	90	5500	24	29	9980
191	0	?	volkswagen	gas	std	four	sedan	fwd	front	100.4	180.2	66.9	55.1	2661	ohc	five	136	mpfi	3.19	3.40	8.50	110	5500	19	24	13295
192	0	?	volkswagen	diesel	turbo	four	sedan	fwd	front	100.4	180.2	66.9	55.1	2579	ohc	four	97	idi	3.01	3.40	23.00	68	4500	33	38	13845
193	0	?	volkswagen	gas	std	four	wagon	fwd	front	100.4	183.1	66.9	55.1	2563	ohc	four	109	mpfi	3.19	3.40	9.00	88	5500	25	31	12290
194	-2	103	volvo	gas	std	four	sedan	rwd	front	104.3	188.8	67.2	56.2	2912	ohc	four	141	mpfi	3.78	3.15	9.50	114	5400	23	28	12940
195	-1	74	volvo	gas	std	four	wagon	rwd	front	104.3	188.8	67.2	57.5	3034	ohc	four	141	mpfi	3.78	3.15	9.50	114	5400	23	28	13415
196	-2	103	volvo	gas	std	four	sedan	rwd	front	104.3	188.8	67.2	56.2	2935	ohc	four	141	mpfi	3.78	3.15	9.50	114	5400	24	28	15985
197	-1	74	volvo	gas	std	four	wagon	rwd	front	104.3	188.8	67.2	57.5	3042	ohc	four	141	mpfi	3.78	3.15	9.50	114	5400	24	28	16515
198	-2	103	volvo	gas	turbo	four	sedan	rwd	front	104.3	188.8	67.2	56.2	3045	ohc	four	130	mpfi	3.62	3.15	7.50	162	5100	17	22	18420
199	-1	74	volvo	gas	turbo	four	wagon	rwd	front	104.3	188.8	67.2	57.5	3157	ohc	four	130	mpfi	3.62	3.15	7.50	162	5100	17	22	18950
200	-1	95	volvo	gas	std	four	sedan	rwd	front	109.1	188.8	68.9	55.5	2952	ohc	four	141	mpfi	3.78	3.15	9.50	114	5400	23	28	16845
201	-1	95	volvo	gas	turbo	four	sedan	rwd	front	109.1	188.8	68.8	55.5	3049	ohc	four	141	mpfi	3.78	3.15	8.70	160	5300	19	25	19045
202	-1	95	volvo	gas	std	four	sedan	rwd	front	109.1	188.8	68.9	55.5	3012	ohcv	six	173	mpfi	3.58	2.87	8.80	134	5500	18	23	21485
203	-1	95	volvo	diesel	turbo	four	sedan	rwd	front	109.1	188.8	68.9	55.5	3217	ohc	six	145	idi	3.01	3.40	23.00	106	4800	26	27	22470
204	-1	95	volvo	gas	turbo	four	sedan	rwd	front	109.1	188.8	68.9	55.5	3062	ohc	four	141	mpfi	3.78	3.15	9.50	114	5400	19	25	22625
205 rows Ã— 26 columns
In [123]:
# Select only the columns with continuous values from - https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.names
continuous_values_cols = ['normalized-losses', 'wheel-base', 'length', 'width', 'height', 'curb-weight', 'bore', 'stroke', 'compression-rate', 'horsepower', 'peak-rpm', 'city-mpg', 'highway-mpg', 'price']
numeric_cars = cars[continuous_values_cols]
In [124]:
numeric_cars.head(5)
Out[124]:
normalized-losses	wheel-base	length	width	height	curb-weight	bore	stroke	compression-rate	horsepower	peak-rpm	city-mpg	highway-mpg	price
0	?	88.6	168.8	64.1	48.8	2548	3.47	2.68	9.0	111	5000	21	27	13495
1	?	88.6	168.8	64.1	48.8	2548	3.47	2.68	9.0	111	5000	21	27	16500
2	?	94.5	171.2	65.5	52.4	2823	2.68	3.47	9.0	154	5000	19	26	16500
3	164	99.8	176.6	66.2	54.3	2337	3.19	3.40	10.0	102	5500	24	30	13950
4	164	99.4	176.6	66.4	54.3	2824	3.19	3.40	8.0	115	5500	18	22	17450

Data Cleaning
In [125]:
numeric_cars = numeric_cars.replace('?', np.nan)
numeric_cars

Out[125]:
normalized-losses	wheel-base	length	width	height	curb-weight	bore	stroke	compression-rate	horsepower	peak-rpm	city-mpg	highway-mpg	price
0	NaN	88.6	168.8	64.1	48.8	2548	3.47	2.68	9.00	111	5000	21	27	13495
1	NaN	88.6	168.8	64.1	48.8	2548	3.47	2.68	9.00	111	5000	21	27	16500
2	NaN	94.5	171.2	65.5	52.4	2823	2.68	3.47	9.00	154	5000	19	26	16500
3	164	99.8	176.6	66.2	54.3	2337	3.19	3.40	10.00	102	5500	24	30	13950
4	164	99.4	176.6	66.4	54.3	2824	3.19	3.40	8.00	115	5500	18	22	17450
5	NaN	99.8	177.3	66.3	53.1	2507	3.19	3.40	8.50	110	5500	19	25	15250
6	158	105.8	192.7	71.4	55.7	2844	3.19	3.40	8.50	110	5500	19	25	17710
7	NaN	105.8	192.7	71.4	55.7	2954	3.19	3.40	8.50	110	5500	19	25	18920
8	158	105.8	192.7	71.4	55.9	3086	3.13	3.40	8.30	140	5500	17	20	23875
9	NaN	99.5	178.2	67.9	52.0	3053	3.13	3.40	7.00	160	5500	16	22	NaN
10	192	101.2	176.8	64.8	54.3	2395	3.50	2.80	8.80	101	5800	23	29	16430
11	192	101.2	176.8	64.8	54.3	2395	3.50	2.80	8.80	101	5800	23	29	16925
12	188	101.2	176.8	64.8	54.3	2710	3.31	3.19	9.00	121	4250	21	28	20970
13	188	101.2	176.8	64.8	54.3	2765	3.31	3.19	9.00	121	4250	21	28	21105
14	NaN	103.5	189.0	66.9	55.7	3055	3.31	3.19	9.00	121	4250	20	25	24565
15	NaN	103.5	189.0	66.9	55.7	3230	3.62	3.39	8.00	182	5400	16	22	30760
16	NaN	103.5	193.8	67.9	53.7	3380	3.62	3.39	8.00	182	5400	16	22	41315
17	NaN	110.0	197.0	70.9	56.3	3505	3.62	3.39	8.00	182	5400	15	20	36880
18	121	88.4	141.1	60.3	53.2	1488	2.91	3.03	9.50	48	5100	47	53	5151
19	98	94.5	155.9	63.6	52.0	1874	3.03	3.11	9.60	70	5400	38	43	6295
20	81	94.5	158.8	63.6	52.0	1909	3.03	3.11	9.60	70	5400	38	43	6575
21	118	93.7	157.3	63.8	50.8	1876	2.97	3.23	9.41	68	5500	37	41	5572
22	118	93.7	157.3	63.8	50.8	1876	2.97	3.23	9.40	68	5500	31	38	6377
23	118	93.7	157.3	63.8	50.8	2128	3.03	3.39	7.60	102	5500	24	30	7957
24	148	93.7	157.3	63.8	50.6	1967	2.97	3.23	9.40	68	5500	31	38	6229
25	148	93.7	157.3	63.8	50.6	1989	2.97	3.23	9.40	68	5500	31	38	6692
26	148	93.7	157.3	63.8	50.6	1989	2.97	3.23	9.40	68	5500	31	38	7609
27	148	93.7	157.3	63.8	50.6	2191	3.03	3.39	7.60	102	5500	24	30	8558
28	110	103.3	174.6	64.6	59.8	2535	3.34	3.46	8.50	88	5000	24	30	8921
29	145	95.9	173.2	66.3	50.2	2811	3.60	3.90	7.00	145	5000	19	24	12964
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
175	65	102.4	175.6	66.5	53.9	2414	3.31	3.54	8.70	92	4200	27	32	9988
176	65	102.4	175.6	66.5	54.9	2414	3.31	3.54	8.70	92	4200	27	32	10898
177	65	102.4	175.6	66.5	53.9	2458	3.31	3.54	8.70	92	4200	27	32	11248
178	197	102.9	183.5	67.7	52.0	2976	3.27	3.35	9.30	161	5200	20	24	16558
179	197	102.9	183.5	67.7	52.0	3016	3.27	3.35	9.30	161	5200	19	24	15998
180	90	104.5	187.8	66.5	54.1	3131	3.27	3.35	9.20	156	5200	20	24	15690
181	NaN	104.5	187.8	66.5	54.1	3151	3.27	3.35	9.20	156	5200	19	24	15750
182	122	97.3	171.7	65.5	55.7	2261	3.01	3.40	23.00	52	4800	37	46	7775
183	122	97.3	171.7	65.5	55.7	2209	3.19	3.40	9.00	85	5250	27	34	7975
184	94	97.3	171.7	65.5	55.7	2264	3.01	3.40	23.00	52	4800	37	46	7995
185	94	97.3	171.7	65.5	55.7	2212	3.19	3.40	9.00	85	5250	27	34	8195
186	94	97.3	171.7	65.5	55.7	2275	3.19	3.40	9.00	85	5250	27	34	8495
187	94	97.3	171.7	65.5	55.7	2319	3.01	3.40	23.00	68	4500	37	42	9495
188	94	97.3	171.7	65.5	55.7	2300	3.19	3.40	10.00	100	5500	26	32	9995
189	NaN	94.5	159.3	64.2	55.6	2254	3.19	3.40	8.50	90	5500	24	29	11595
190	256	94.5	165.7	64.0	51.4	2221	3.19	3.40	8.50	90	5500	24	29	9980
191	NaN	100.4	180.2	66.9	55.1	2661	3.19	3.40	8.50	110	5500	19	24	13295
192	NaN	100.4	180.2	66.9	55.1	2579	3.01	3.40	23.00	68	4500	33	38	13845
193	NaN	100.4	183.1	66.9	55.1	2563	3.19	3.40	9.00	88	5500	25	31	12290
194	103	104.3	188.8	67.2	56.2	2912	3.78	3.15	9.50	114	5400	23	28	12940
195	74	104.3	188.8	67.2	57.5	3034	3.78	3.15	9.50	114	5400	23	28	13415
196	103	104.3	188.8	67.2	56.2	2935	3.78	3.15	9.50	114	5400	24	28	15985
197	74	104.3	188.8	67.2	57.5	3042	3.78	3.15	9.50	114	5400	24	28	16515
198	103	104.3	188.8	67.2	56.2	3045	3.62	3.15	7.50	162	5100	17	22	18420
199	74	104.3	188.8	67.2	57.5	3157	3.62	3.15	7.50	162	5100	17	22	18950
200	95	109.1	188.8	68.9	55.5	2952	3.78	3.15	9.50	114	5400	23	28	16845
201	95	109.1	188.8	68.8	55.5	3049	3.78	3.15	8.70	160	5300	19	25	19045
202	95	109.1	188.8	68.9	55.5	3012	3.58	2.87	8.80	134	5500	18	23	21485
203	95	109.1	188.8	68.9	55.5	3217	3.01	3.40	23.00	106	4800	26	27	22470
204	95	109.1	188.8	68.9	55.5	3062	3.78	3.15	9.50	114	5400	19	25	22625
205 rows Ã— 14 columns
In [126]:
numeric_cars = numeric_cars.astype('float')
numeric_cars.isnull().sum()
Out[126]:
normalized-losses    41
wheel-base            0
length                0
width                 0
height                0
curb-weight           0
bore                  4
stroke                4
compression-rate      0
horsepower            2
peak-rpm              2
city-mpg              0
highway-mpg           0
price                 4
dtype: int64
In [127]:

# Because `price` is the column we want to predict, any rows with missing 'price' values must be removed.

numeric_cars = numeric_cars.dropna(subset=['price'])
numeric_cars.isnull().sum()
Out[127]:
normalized-losses    37
wheel-base            0
length                0
width                 0
height                0
curb-weight           0
bore                  4
stroke                4
compression-rate      0
horsepower            2
peak-rpm              2
city-mpg              0
highway-mpg           0
price                 0
dtype: int64
In [128]:

# Replace missing values in other columns using column means.
numeric_cars = numeric_cars.fillna(numeric_cars.mean())
In [129]:
# Confirm that there's no more missing values!
numeric_cars.isnull().sum()
Out[129]:
normalized-losses    0
wheel-base           0
length               0
width                0
height               0
curb-weight          0
bore                 0
stroke               0
compression-rate     0
horsepower           0
peak-rpm             0
city-mpg             0
highway-mpg          0
price                0
dtype: int64
In [130]:

# Normalize all columnns to range from 0 to 1 except the target column.

price_col = numeric_cars['price']
numeric_cars = (numeric_cars.max() - numeric_cars)/(numeric_cars.max())
numeric_cars['price'] = price_col
Univariate Model
In [162]:
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

def knn_train_test(train_col, target_col, df):
    knn = KNeighborsRegressor()
    np.random.seed(1)
        
    # Randomize order of rows in data frame.
    shuffled_index = np.random.permutation(df.index)
    rand_df = df.reindex(shuffled_index)

    # Divide number of rows in half and round.
    last_train_row = int(len(rand_df) / 2)
    
    # Select the first half and set as training set.
    # Select the second half and set as test set.
    train_df = rand_df.iloc[0:last_train_row]
    test_df = rand_df.iloc[last_train_row:]
    
    # Fit a KNN model using default k value.
    knn.fit(train_df[[train_col]], train_df[target_col])
    
    # Make predictions using model.
    predicted_labels = knn.predict(test_df[[train_col]])

    # Calculate and return RMSE.
    mse = mean_squared_error(test_df[target_col], predicted_labels)
    rmse = np.sqrt(mse)
    return rmse

rmse_results = {}
train_cols = numeric_cars.columns.drop('price')

# For each column (minus `price`), train a model, return RMSE value
# and add to the dictionary `rmse_results`.
for col in train_cols:
    rmse_val = knn_train_test(col, 'price', numeric_cars)
    rmse_results[col] = rmse_val

# Create a Series object from the dictionary so 
# can easily view the results, sort, etc
rmse_results_series = pd.Series(rmse_results)
rmse_results_series.sort_values()
Out[162]:
horsepower           4007.472352
curb-weight          4437.934395
highway-mpg          4579.037250
width                4644.898429
city-mpg             4729.673421
length               5382.671155
wheel-base           5527.682489
compression-rate     6736.676353
bore                 6816.853712
height               7487.652519
peak-rpm             7498.746475
normalized-losses    7635.170416
stroke               8078.491289
dtype: float64
In [163]:
def knn_train_test(train_col, target_col, df):
    np.random.seed(1)
        
    # Randomize order of rows in data frame.
    shuffled_index = np.random.permutation(df.index)
    rand_df = df.reindex(shuffled_index)

    # Divide number of rows in half and round.
    last_train_row = int(len(rand_df) / 2)
    
    # Select the first half and set as training set.
    # Select the second half and set as test set.
    train_df = rand_df.iloc[0:last_train_row]
    test_df = rand_df.iloc[last_train_row:]
    
    k_values = [1,3,5,7,9]
    k_rmses = {}
    
    for k in k_values:
        # Fit model using k nearest neighbors.
        knn = KNeighborsRegressor(n_neighbors=k)
        knn.fit(train_df[[train_col]], train_df[target_col])

        # Make predictions using model.
        predicted_labels = knn.predict(test_df[[train_col]])

        # Calculate and return RMSE.
        mse = mean_squared_error(test_df[target_col], predicted_labels)
        rmse = np.sqrt(mse)
        
        k_rmses[k] = rmse
    return k_rmses

k_rmse_results = {}

# For each column (minus `price`), train a model, return RMSE value
# and add to the dictionary `rmse_results`.
train_cols = numeric_cars.columns.drop('price')
for col in train_cols:
    rmse_val = knn_train_test(col, 'price', numeric_cars)
    k_rmse_results[col] = rmse_val

k_rmse_results
Out[163]:
{'bore': {1: 7496.1492312406444,
  3: 6936.9888741632003,
  5: 6816.8537123691885,
  7: 7062.0613050538341,
  9: 6869.7274373649016},
 'city-mpg': {1: 4540.3610032247389,
  3: 4662.4683767438482,
  5: 4729.6734209992692,
  7: 5099.2742894698586,
  9: 4999.2917237740958},
 'compression-rate': {1: 9024.9026779536325,
  3: 7033.5529229950389,
  5: 6736.676353123451,
  7: 7459.1131944220724,
  9: 7219.385481303907},
 'curb-weight': {1: 5518.8832374058084,
  3: 5048.6077260366692,
  5: 4437.9343946355393,
  7: 4369.3490898512136,
  9: 4632.2055452210743},
 'height': {1: 9108.4718365936551,
  3: 8049.9871472883196,
  5: 7487.6525188849646,
  7: 7753.7974180840583,
  9: 7695.632426557866},
 'highway-mpg': {1: 5270.360471073066,
  3: 4618.1866223408379,
  5: 4579.0372499290315,
  7: 4914.2600028726101,
  9: 5181.9124189636359},
 'horsepower': {1: 3749.5962185254293,
  3: 3964.9503610053594,
  5: 4007.4723516831596,
  7: 4391.4816735297054,
  9: 4505.1886320053109},
 'length': {1: 5291.7851645472883,
  3: 5267.2167776785409,
  5: 5382.6711551381659,
  7: 5396.362242025737,
  9: 5420.5479164322587},
 'normalized-losses': {1: 7906.5941410250143,
  3: 6712.8733553798356,
  5: 7635.1704160923791,
  7: 7870.6510032392407,
  9: 8221.5784655443185},
 'peak-rpm': {1: 9825.559283202294,
  3: 8025.1729800507092,
  5: 7498.7464749413657,
  7: 7296.5172664110205,
  9: 7239.4781688794701},
 'stroke': {1: 7282.3488587810798,
  3: 7664.9840308065386,
  5: 8078.4912887356768,
  7: 7754.4838594616886,
  9: 7723.9131538450647},
 'wheel-base': {1: 5964.6822353178914,
  3: 5246.472910232148,
  5: 5527.6824887322919,
  7: 5485.6830335257237,
  9: 5734.4339857054465},
 'width': {1: 4453.161424568767,
  3: 4697.2871145506588,
  5: 4644.8984285434217,
  7: 4562.1341847495605,
  9: 4643.8823393933362}}
In [172]:
import matplotlib.pyplot as plt
%matplotlib inline

for k,v in k_rmse_results.items():
    x = list(v.keys())
    y = list(v.values())
    
    plt.plot(x,y)
    plt.xlabel('k value')
    plt.ylabel('RMSE')

Multivariate Model
In [180]:
# Compute average RMSE across different `k` values for each feature.
feature_avg_rmse = {}
for k,v in k_rmse_results.items():
    avg_rmse = np.mean(list(v.values()))
    feature_avg_rmse[k] = avg_rmse
series_avg_rmse = pd.Series(feature_avg_rmse)
series_avg_rmse.sort_values()
Out[180]:
horsepower           4123.737847
width                4600.272698
curb-weight          4801.395999
city-mpg             4806.213763
highway-mpg          4912.751353
length               5351.716651
wheel-base           5591.790931
bore                 7036.356112
compression-rate     7494.726126
normalized-losses    7669.373476
stroke               7700.844238
peak-rpm             7977.094835
height               8019.108269
dtype: float64
In [185]:
def knn_train_test(train_cols, target_col, df):
    np.random.seed(1)
    
    # Randomize order of rows in data frame.
    shuffled_index = np.random.permutation(df.index)
    rand_df = df.reindex(shuffled_index)

    # Divide number of rows in half and round.
    last_train_row = int(len(rand_df) / 2)
    
    # Select the first half and set as training set.
    # Select the second half and set as test set.
    train_df = rand_df.iloc[0:last_train_row]
    test_df = rand_df.iloc[last_train_row:]
    
    k_values = [5]
    k_rmses = {}
    
    for k in k_values:
        # Fit model using k nearest neighbors.
        knn = KNeighborsRegressor(n_neighbors=k)
        knn.fit(train_df[train_cols], train_df[target_col])

        # Make predictions using model.
        predicted_labels = knn.predict(test_df[train_cols])

        # Calculate and return RMSE.
        mse = mean_squared_error(test_df[target_col], predicted_labels)
        rmse = np.sqrt(mse)
        
        k_rmses[k] = rmse
    return k_rmses

k_rmse_results = {}

two_best_features = ['horsepower', 'width']
rmse_val = knn_train_test(two_best_features, 'price', numeric_cars)
k_rmse_results["two best features"] = rmse_val

three_best_features = ['horsepower', 'width', 'curb-weight']
rmse_val = knn_train_test(three_best_features, 'price', numeric_cars)
k_rmse_results["three best features"] = rmse_val

four_best_features = ['horsepower', 'width', 'curb-weight', 'city-mpg']
rmse_val = knn_train_test(four_best_features, 'price', numeric_cars)
k_rmse_results["four best features"] = rmse_val

five_best_features = ['horsepower', 'width', 'curb-weight' , 'city-mpg' , 'highway-mpg']
rmse_val = knn_train_test(five_best_features, 'price', numeric_cars)
k_rmse_results["five best features"] = rmse_val

six_best_features = ['horsepower', 'width', 'curb-weight' , 'city-mpg' , 'highway-mpg', 'length']
rmse_val = knn_train_test(six_best_features, 'price', numeric_cars)
k_rmse_results["six best features"] = rmse_val

k_rmse_results
Out[185]:
{'five best features': {5: 3346.6737097607775},
 'four best features': {5: 3232.1036292326721},
 'six best features': {5: 3398.1290113563641},
 'three best features': {5: 3212.5596306057919},
 'two best features': {5: 3681.3980922556266}}
Multivariate Model
In [188]:
def knn_train_test(train_cols, target_col, df):
    np.random.seed(1)
    
    # Randomize order of rows in data frame.
    shuffled_index = np.random.permutation(df.index)
    rand_df = df.reindex(shuffled_index)

    # Divide number of rows in half and round.
    last_train_row = int(len(rand_df) / 2)
    
    # Select the first half and set as training set.
    # Select the second half and set as test set.
    train_df = rand_df.iloc[0:last_train_row]
    test_df = rand_df.iloc[last_train_row:]
    
    k_values = [i for i in range(1, 25)]
    k_rmses = {}
    
    for k in k_values:
        # Fit model using k nearest neighbors.
        knn = KNeighborsRegressor(n_neighbors=k)
        knn.fit(train_df[train_cols], train_df[target_col])

        # Make predictions using model.
        predicted_labels = knn.predict(test_df[train_cols])

        # Calculate and return RMSE.
        mse = mean_squared_error(test_df[target_col], predicted_labels)
        rmse = np.sqrt(mse)
        
        k_rmses[k] = rmse
    return k_rmses

k_rmse_results = {}

three_best_features = ['horsepower', 'width', 'curb-weight']
rmse_val = knn_train_test(three_best_features, 'price', numeric_cars)
k_rmse_results["three best features"] = rmse_val

four_best_features = ['horsepower', 'width', 'curb-weight', 'city-mpg']
rmse_val = knn_train_test(four_best_features, 'price', numeric_cars)
k_rmse_results["four best features"] = rmse_val

five_best_features = ['horsepower', 'width', 'curb-weight' , 'city-mpg' , 'highway-mpg']
rmse_val = knn_train_test(five_best_features, 'price', numeric_cars)
k_rmse_results["five best features"] = rmse_val

k_rmse_results
Out[188]:
{'five best features': {1: 2561.7319037195625,
  2: 2567.2749455482176,
  3: 2949.9007889192553,
  4: 3074.6091106298891,
  5: 3346.6737097607775,
  6: 3686.4646211770864,
  7: 3907.1959982578019,
  8: 4104.0339873177718,
  9: 4335.7141974258602,
  10: 4463.6007084810435,
  11: 4444.0259889090448,
  12: 4534.547516044051,
  13: 4638.5257014541967,
  14: 4686.7680627393893,
  15: 4676.6172318274348,
  16: 4706.4889916373404,
  17: 4714.757468354599,
  18: 4724.0179262108768,
  19: 4780.0364569672583,
  20: 4790.8654014852591,
  21: 4788.4429142051176,
  22: 4820.2560355653704,
  23: 4823.6246116515467,
  24: 4830.7715122893824},
 'four best features': {1: 3135.5489073677436,
  2: 2514.1812009849527,
  3: 2788.5519417420178,
  4: 2917.4679936225316,
  5: 3232.1036292326721,
  6: 3566.725419074407,
  7: 3834.9804809872821,
  8: 3927.3952487590609,
  9: 4078.9765839753827,
  10: 4199.8376270003955,
  11: 4345.0069904611819,
  12: 4451.3870113027624,
  13: 4550.1634683008278,
  14: 4591.5340160428832,
  15: 4630.3996426828098,
  16: 4711.9117982858279,
  17: 4692.3372730081592,
  18: 4709.1872236435829,
  19: 4698.1962740829795,
  20: 4738.5487814580347,
  21: 4727.3518464816807,
  22: 4719.3369599341022,
  23: 4707.9563401268824,
  24: 4753.4193738950999},
 'three best features': {1: 3308.7499419294022,
  2: 3044.812909435545,
  3: 3042.2117028741623,
  4: 2958.964739955848,
  5: 3212.5596306057919,
  6: 3542.3007736748041,
  7: 3801.5597829031262,
  8: 4007.7501484785639,
  9: 4074.3452185932656,
  10: 4225.0494506919176,
  11: 4338.8991649386644,
  12: 4428.0841388589351,
  13: 4496.3621365502913,
  14: 4540.1357252028592,
  15: 4614.0272979737174,
  16: 4654.474275823789,
  17: 4714.0580949648638,
  18: 4645.9886513064885,
  19: 4628.211244787356,
  20: 4665.0992005704829,
  21: 4648.5009310888045,
  22: 4610.0134050293573,
  23: 4642.8367354686252,
  24: 4669.5676777327653}}
In [189]:
for k,v in k_rmse_results.items():
    x = list(v.keys())
    y = list(v.values())
    
    plt.plot(x,y)
    plt.xlabel('k value')
    plt.ylabel('RMSE')
